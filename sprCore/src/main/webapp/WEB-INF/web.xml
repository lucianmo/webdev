<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" 
	xmlns="http://java.sun.com/xml/ns/j2ee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

  <!-- Customize the location of log file after deployment.
       Set upp the location of the log4j properties in a context-param but 
       you do not need to do this if it is placed on the classpath -->
  <context-param>
	  <param-name>log4jConfigLocation</param-name>
	  <param-value>/WEB-INF/classes/log4j/log4j.properties</param-value>
  </context-param>

  <!-- Customize the file name and location for “root” context to host “shared resources” required by Servlets / Filters -->
  <context-param>
   <param-name>contextConfigLocation</param-name>
   <param-value>/WEB-INF/applicationContext.xml</param-value>
  </context-param>

  <!-- ContextLoaderListener loads the configuration file(s) specified in the contextConfigLocation context parameter into Spring's root context. -->
  <listener>
     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <!-- Configuring the log4j. Place the spring Log4jConfigListener as the first listener -->
  <listener>
     <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  

  <!-- DispatcherServlet then loads the servlet configuration into a separate context, with the root context as its parent.
       This means that the settings in the servlet context can refer to, and even override, the settings in the root context. 
   -->
  <servlet>
    <servlet-name>springapp</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
 
  <!--  Send all .html files to the Spring dispatcher servlet -->
  <servlet-mapping>
    <servlet-name>springapp</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
    	
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
</web-app>
